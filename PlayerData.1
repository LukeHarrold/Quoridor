"""
Quoridor II: Student Computer Player

A sample class you may use to hold your state data
Author: Adam Oest (amo9149@rit.edu)
Author: YOUR NAME HERE (your email address)
Author: YOUR NAME HERE (your email address)
Author: YOUR NAME HERE (your email address)
"""

class PlayerData(object):
    """A sample class for your player data"""
    
    # Add other slots as needed
    __slots__ = ('logger', 'playerId', 'config', 'playerLocations', 'numPlayers', 'board', 'walls', 'moveLog', \
                 'playerHomes')
    
    def __init__(self, logger, playerId, config, playerLocations, board, walls, moveLog, numWalls, playerHomes):
        """
        __init__: 
        Constructs and returns an instance of PlayerData.
            self - new instance
            logger - the engine logger
            playerId - my player ID (1-4)
            playerLocations - list of player start coordinates
            
        """
        
        self.logger = logger
        self.playerId = playerId
        self.config=config
        self.playerLocations = playerLocations
        self.numPlayers = len(playerLocations)
        self.board=board
        self.walls=walls
        self.moveLog=moveLog
        self.numWalls=numWalls
        playerHomes=[]
        # initialize any other slots you require here
        
    def __str__(self):
        """
        __str__: PlayerData -> string
        Returns a string representation of the PlayerData object.
            self - the PlayerData object
        """
        result = "PlayerData= " \
                    + "playerId: " + str(self.playerId) \
                    + ", playerLocations: " + str(self.playerLocations) \
                    + ", numPlayers:" + str(self.numPlayers)
                
        # add any more string concatenation for your other slots here
                
        return result
class Tile(object):
    __slots__ = ('r', 'c', 'neighbors', 'coords')
    
    def __init__(self, r, c, coords):
        self.r = r
        self.c = c
        self.neighbors = []
        self.coords = coords
        
    def __str__(self):
        result = "Tile: r: " \
        + str(self.r) \
        + ", c: " + str(self.c) \
        + ", neighbors: " + str(self.neighbors) \
        + ", coords: " + str(self.coords)
        return result
class Player(object):
    __slots__ = ('r', 'c', 'neighbors', 'coords', 'ID')
    
    def __init__(self, r, c, coords, ID):
        self.r = r
        self.c = c
        self.neighbors = []
        self.coords = coords
        self.ID = ID
       
                
    def __str__(self):
        result = "Cell: r: " \
        + str(self.r) \
        + ", c: " + str(self.c) \
        + ", neighbors: " + str(self.neighbors) \
        + ", coords: " + str(self.coords) \
        + ", ID: " + str(self.ID)
        return result
class Wall(object):
    __slots__ = ('r1', 'c1', 'orientation', 'coords')
    
    def __init__(self, r1, c1, orientation, coords):
        self.r1 = r1
        self.c1 = c1
        self.orientation = orientation
        self.coords = coords
       
        
    def __str__(self):
        result = "Wall: r1: " + str(self.r1) \
        + ", c1: " + str(self.c1) \
        + ", orientation: " + str(self.orientation) \
        + ", coords: " + str(self.coords) \
        + ", coorispondingCoords: " +str(self.coorispondingCoords)
        return result
        
